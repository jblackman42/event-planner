<!DOCTYPE html>
<html lang="en">
    <head>
        <%- include('../partials/head'); %>
    </head>
<body>
    <%- include('../partials/loading'); %>
    <%- include('../partials/popup'); %>

    <%- include('../partials/navbar'); %>

    <div id="calender-container">
        <div id="calender-controls">
            <div>
                <button onClick="prevMonth()"><i class="material-icons">keyboard_arrow_left</i></button>
                <p id="date-label"></p>
                <button onClick="nextMonth()"><i class="material-icons">keyboard_arrow_right</i></button>
            </div>
            <div>
                <label for="filter">Location: </label>
                <select name="filter" id="filter" onchange="handleFilterChange(event)">
                    <option value="0">All</option>
                </select>
            </div>
            <div>
                <label for="building-filter">Building:</label>
                <select name="building-filter" id="building-filter" onchange="handleBuildingFilterChange(event)">
                    <option value="0">All</option>
                </select>
            </div>
            <div>
                <label for="room-filter">Room:</label>
                <select name="room-filter" id="room-filter">
                    <option value="0">All</option>
                </select>
            </div>
            <button onclick="handleEvents()">Submit</button>
        </div>

        <div id="calender-labels">
            <p>sunday</p>
            <p>monday</p>
            <p>tuesday</p>
            <p>wednesday</p>
            <p>thursday</p>
            <p>friday</p>
            <p>saturday</p>
        </div>
        
        <div id="calender"></div>
    </div>
</body>
<script src="/scripts/calendar.js"></script>
<script>

    async function handleEvents() {
        loading();

        //reset number of events
        dates.map(date => date.numberOfEvents = 0)

        allEvents = await getEvents(currentMonth, currentYear, 'calendar')
        events = allEvents;
        // console.log(events)

        // console.log(calendarFilterDOM.value)
        // console.log(buildingFilterDOM.value)
        // console.log(roomFilterDOM.value)

        if (calendarFilterDOM.value > 0) {
            events = allEvents.filter(event => event.Location_ID == calendarFilterDOM.value)
        }

        if (buildingFilterDOM.value > 0 && roomFilterDOM.value > 0) {
            console.log('room filter')
            for (let i = 0; i < events.length; i ++) { //loop through all events
                const {Event_ID} = events[i];
                const roomIDs = await getEventRoomIDs(Event_ID); //get array of Room_IDs
                if (!roomIDs.filter(roomID => roomID == roomFilterDOM.value).length) {
                    events.splice(i, 1);
                    i --;
                }
            }
        } else if (buildingFilterDOM.value > 0) {
            console.log('building filter')
            const currentBuilding = roomsList.filter(building => building.Building_ID == buildingFilterDOM.value)[0];
            const currentBuildingRooms = currentBuilding.rooms.map(room => room.Room_ID);
            console.log(currentBuildingRooms)

            for (let i = 0; i < events.length; i ++) { //loop through all events
                const {Event_ID} = events[i];
                const roomIDs = await getEventRoomIDs(Event_ID); //get array of Room_IDs
                if (!roomIDs.filter(roomID => currentBuildingRooms.includes(roomID)).length) {
                    events.splice(i, 1);
                    i --;
                }
            }
        }
        
        //loop through all data
        //check if data date is in dates array
        //log data

        for (let i = 0; i < events.length; i ++) {
            const {Event_Start_Date, Cancelled, Location_ID} = events[i];
            const eventDate = new Date(Event_Start_Date);
            dates.map(date => {
                const {day} = date;
                if (day == eventDate.toDateString() && !Cancelled) {
                    date.numberOfEvents ++;
                }
                return date;
            })
        }
        
        doneLoading();
        drawCalendar();

        //background loading to do while calendar is loaded
        // const rooms = events.map(async (event, index) => {
        //     return await getEventRooms(event.Event_ID)
        // })
        // const getRooms = async() => {
        //     return Promise.all(events.map(async event => {
        //         return await getEventRooms(event.Event_ID)
        //     }))
        // }
        // const rooms = await getRooms();
        // console.log(rooms)
    }
    handleEvents(calendarFilterDOM.value);

    const handleFilterChange = async (e) => {
        const filterValue = e.target.value;

        if (filterValue > 0) {
            getBuildingFilters(filterValue)
        };

        return filterValue;
    }

    const handleBuildingFilterChange = async (e) => {
        const filterValue = e.target.value;

        if (filterValue > 0) {
            getRoomFilters(filterValue)
        };

        return e.target.value;
    }

    function updateDates() {
        dates = getMonth(currentYear, currentMonth);
        handleEvents(calendarFilterDOM.value)
    }

    function nextMonth() {
        const nextCurrMonth = currentMonth + 1;
        if (nextCurrMonth > 11) {
            currentYear ++;
            currentMonth = 0;
        } else {
            currentMonth ++;
        }
        updateDates();
    }
    function prevMonth() {
        const prevCurrMonth = currentMonth - 1;
        if (prevCurrMonth < 0) {
            currentYear --;
            currentMonth = 11;
        } else {
            currentMonth --;
        }
        updateDates();
    }

    const getEventsList = async (day) => { //day is in short form (Fri Aug 05 2022)
        const daysEvents = getEventsFromDay(day);

        const eventsList = async () => {
            return Promise.all(daysEvents.map(async (event) => {
                const {Event_Title, Event_Start_Date, Event_End_Date, Meeting_Instructions, Event_ID, Location_ID, Minutes_for_Cleanup, Minutes_for_Setup} = event;

                const eventRooms = await getEventRooms(Event_ID);

                const rooms = async () => {
                    return Promise.all(eventRooms.map((eventRoom) => getRoom(eventRoom.Room_ID)))
                }

                return {
                    Event_Title: Event_Title,
                    Event_Start_Date: Event_Start_Date,
                    Event_End_Date: Event_End_Date,
                    Meeting_Instructions: Meeting_Instructions,
                    Rooms: await rooms(),
                    Event_ID: Event_ID,
                    Location_ID: Location_ID,
                    Minutes_for_Setup: Minutes_for_Setup,
                    Minutes_for_Cleanup: Minutes_for_Cleanup
                }
            }))
        }
        return await eventsList()
    }
    
    
</script>
</html>