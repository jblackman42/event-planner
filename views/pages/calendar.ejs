<!DOCTYPE html>
<html lang="en">
    <head>
        <%- include('../partials/head'); %>
    </head>
<body>
    <%- include('../partials/loading'); %>

    <div id="calender-container">
        <div id="calender-controls">
            <button onClick="prevMonth()"><i class="material-icons">keyboard_arrow_left</i></button>
            <p id="date-label"></p>
            <button onClick="nextMonth()"><i class="material-icons">keyboard_arrow_right</i></button>
        </div>

        <div id="calender-labels">
            <p>sunday</p>
            <p>monday</p>
            <p>tuesday</p>
            <p>wednesday</p>
            <p>thursday</p>
            <p>friday</p>
            <p>saturday</p>
        </div>
        
        <div id="calender"></div>
    </div>
</body>
<script src="/scripts/calendar.js"></script>
<script>
    let iteration = 0
    function getEvents() {
        loading();

        let latestDate = new Date('Dec 31 1960');
        let earliestDate = new Date('Jan 1 3000')

        axios({
            method: 'get',
            url: `https://my.pureheart.org/ministryplatformapi/tables/events?%24orderby=Event_Start_Date%20DESC`,
            headers: {
                'Accept': 'application/json',
                'Authorization': `Bearer ${access_token}`
            }
        })
            .then(response => response.data)
            .then(data => {
                // console.log(data)
                //loop through all data
                //check if data date is in dates array
                //log data
                let monthHasEvents = false;

                for (let i = 0; i < data.length; i ++) {
                    const {Event_Start_Date} = data[i];

                    const eventDate = new Date(Event_Start_Date);
                    // console.log(eventDate)
                    if (eventDate > latestDate) {
                        latestDate = eventDate;
                    } else if (eventDate < earliestDate) {
                        earliestDate = eventDate;
                    }
                    
                    const datesWithEvents = dates.filter(date => date.day == eventDate.toDateString());
                    datesWithEvents.forEach(date => {
                        date.numberOfEvents ++;
                        monthHasEvents = true;
                    })
                }

                console.log(earliestDate)
                console.log(latestDate)
                const firstDayVisible = new Date(dates[0].day);
                const lastDayVisible = new Date(dates[dates.length - 1].day)

                //if the events stored dont cover the whole month it will get new months
                if (earliestDate > firstDayVisible) {
                    console.log('get new events ++')
                    iteration ++;
                    getEvents();
                } else if (latestDate > lastDayVisible && iteration > 0) {
                    console.log('get new events --')
                    iteration --;
                    getEvents();
                } 
                // if (!monthHasEvents && right && iteration > 0) {
                //     iteration --;
                //     getEvents();
                // } else if (!monthHasEvents && left) {
                //     iteration ++;
                //     getEvents();
                // } else {
                //     drawCalender();
                //     doneLoading();
                // }
                drawCalender();
                doneLoading();
            })
            .catch(err => {
                console.error(err)
            })
    }
    getEvents()

    function updateDates() {
        dates = getMonth(currentYear, currentMonth);
        getEvents()
    }
    function nextMonth() {
        right = true;
        left = false;
        const nextCurrMonth = currentMonth + 1;
        if (nextCurrMonth > 11) {
            currentYear ++;
            currentMonth = 0;
        } else {
            currentMonth ++;
        }
        updateDates();
    }
    function prevMonth() {
        right = false;
        left = true;
        const prevCurrMonth = currentMonth - 1;
        if (prevCurrMonth < 0) {
            currentYear --;
            currentMonth = 11;
        } else {
            currentMonth --;
        }
        updateDates();
    }
</script>
</html>