<!DOCTYPE html>
<html lang="en">
    <head>
        <%- include('../partials/head'); %>
    </head>
<body>
    <%- include('../partials/loading'); %>
    <%- include('../partials/popup'); %>

    <div id="calender-container">
        <div id="calender-controls">
            <button onClick="prevMonth()"><i class="material-icons">keyboard_arrow_left</i></button>
            <p id="date-label"></p>
            <button onClick="nextMonth()"><i class="material-icons">keyboard_arrow_right</i></button>
        </div>

        <div id="calender-labels">
            <p>sunday</p>
            <p>monday</p>
            <p>tuesday</p>
            <p>wednesday</p>
            <p>thursday</p>
            <p>friday</p>
            <p>saturday</p>
        </div>
        
        <div id="calender"></div>
    </div>
</body>
<script src="/scripts/calendar.js"></script>
<script>
    let iteration = 0;
    let events;
    
    async function handleEvents(reloadEvents) {
        loading();

        if (reloadEvents) {
            events = await getEvents();
        }

        let latestDate = new Date('Dec 31 1960');
        let earliestDate = new Date('Jan 1 3000');
        
        //loop through all data
        //check if data date is in dates array
        //log data
        let monthHasEvents = false;

        for (let i = 0; i < events.length; i ++) {
            const {Event_Start_Date, Cancelled} = events[i];

            const eventDate = new Date(Event_Start_Date);
            // console.log(eventDate)
            if (eventDate > latestDate) {
                latestDate = eventDate;
            } else if (eventDate < earliestDate) {
                earliestDate = eventDate;
            }
            
            const datesWithEvents = dates.filter(date => date.day == eventDate.toDateString() && !Cancelled);
            datesWithEvents.forEach(date => {
                date.numberOfEvents ++;
                monthHasEvents = true;
            })
        }

        // console.log(earliestDate.toDateString(),', ', latestDate.toDateString())
        const firstDayVisible = new Date(dates[0].day);
        const lastDayVisible = new Date(dates[dates.length - 1].day)
        // console.log(firstDayVisible.toDateString(),', ', lastDayVisible.toDateString())
        //if the events stored dont cover the whole month it will get new months
        if (earliestDate >= firstDayVisible) {
            // console.log('earliest date after last visible date')
            iteration ++;
            handleEvents(true);
        } else if (latestDate <= lastDayVisible && iteration > 0) {
            // console.log('latest date before first date visible')
            iteration --;
            handleEvents(true);
        } else {
            drawCalender();
            doneLoading();
        }
        
    }
    handleEvents(true);

    function updateDates() {
        dates = getMonth(currentYear, currentMonth);
        handleEvents()
    }
    function nextMonth() {
        right = true;
        left = false;
        const nextCurrMonth = currentMonth + 1;
        if (nextCurrMonth > 11) {
            currentYear ++;
            currentMonth = 0;
        } else {
            currentMonth ++;
        }
        updateDates();
    }
    function prevMonth() {
        right = false;
        left = true;
        const prevCurrMonth = currentMonth - 1;
        if (prevCurrMonth < 0) {
            currentYear --;
            currentMonth = 11;
        } else {
            currentMonth --;
        }
        updateDates();
    }

    const getEventsList = async (day) => { //day is in short form (Fri Aug 05 2022)
        const daysEvents = getEventsFromDay(day);

        const eventsList = async () => {
            return Promise.all(daysEvents.map(async (event) => {
            const {Event_Title, Event_Start_Date, Event_End_Date, Meeting_Instructions, Event_ID} = event;

            const eventRooms = await getEventRooms(Event_ID);

            const rooms = async () => {
                return Promise.all(eventRooms.map((eventRoom) => getRoom(eventRoom.Room_ID)))
            }

            return {
                Event_Title: Event_Title,
                Event_Start_Date: Event_Start_Date,
                Event_End_Date: Event_End_Date,
                Meeting_Instructions: Meeting_Instructions,
                Rooms: await rooms(),
                Event_ID: Event_ID
            }
            }))
        }
        return await eventsList()
    }
    
    
</script>
</html>